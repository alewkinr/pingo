package main

import (
	"context"

	myCLI "github.com/alewkinr/pingo/cmd"
	"github.com/alewkinr/pingo/internal/config"
	"github.com/alewkinr/pingo/pkg/log"
	"github.com/alewkinr/pingo/pkg/validation"
	"github.com/segmentio/cli"
)

// CmdSendMessage ‚Äî –∫–æ–¥–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —à–∞–±–ª–æ–Ω–∞
const CmdSendMessage = "send"

// CmdSendMessageArgs ‚Äî –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã CmdSendMessage
// TODO: –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª, –∫–∞–∫ —ç—Ç–æ —É–Ω–µ—Å—Ç–∏ –≤ cmd.CLI
type CmdSendMessageArgs struct {
	_ struct{} `help:"Send custom message via command line"`
	// Destination ‚Äî –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	Destination string `flag:"-d,--destination" help:"Destination for your message" validate:"required"` // TODO: –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–≥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç. –ï–≥–æ —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —é–∑–∞—Ç—å –≤ config.Config
	// Message ‚Äî —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
	Message string `flag:"-m,--message" help:"Message text" validate:"required_with=Destination,min=1"`
}

// CmdSendTemplateMessage ‚Äî –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É
const CmdSendTemplateMessage = "send-template"

// CmdSendTemplateMessageArgs ‚Äî –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã CmdSendTemplateMessage
type CmdSendTemplateMessageArgs struct {
	_ struct{} `help:"Reads templates config file and send template by its name"`
	// TemplatesConfigFile ‚Äî –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤
	TemplatesConfigFile string `flag:"-c,--config" help:"Templates config file" default:"templates.yaml" validate:"required,file"`
	// TemplateName ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
	TemplateName string `flag:"-n,--name" help:"Template name" validate:"required_with=TemplatesConfigFile,min=1"`
}

// runCLI ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º CLI
func runCLI(ctx context.Context) {
	lgr := log.SetUpLogging()
	v := validation.NewPlayground()
	settings := config.MustInitConfig()

	app := myCLI.NewCLI(lgr, v, settings)
	app.L().Debugln("üéâ New CLI app initialized!")

	// ref: https://pkg.go.dev/github.com/segmentio/cli#example-CommandSet-Help2
	cli.ExecContext(ctx, cli.CommandSet{
		CmdSendMessage: cli.Command(func(args CmdSendMessageArgs) (int, error) {
			if validateArgsErr := v.Validate(args); validateArgsErr != nil {
				return myCLI.ExitWithErr, validateArgsErr
			}
			return app.Send(args.Destination, args.Message)
		}),
		CmdSendTemplateMessage: cli.Command(
			func(args CmdSendTemplateMessageArgs) (int, error) {
				if validateArgsErr := v.Validate(args); validateArgsErr != nil {
					return myCLI.ExitWithErr, validateArgsErr
				}
				return app.SendTemplate(args.TemplatesConfigFile, args.TemplateName)
			}),
	})
}

func main() {
	ctx := context.TODO()
	runCLI(ctx)
}
